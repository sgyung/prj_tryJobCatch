<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.sist.user.review">
<select id="reviewTotalCount" resultType="int" parameterType="java.util.HashMap">
   WITH RankedData AS (
    SELECT
        cm.cm_co_name,
        cm.cm_co_logo,
        cm.cm_industry,
        cm.cm_id,
        LISTAGG(asa.as_sal, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_sal,
        LISTAGG(asa.as_first_sal, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_first_sal,
        LISTAGG(asa.as_retirement_pay, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_retirement_pay,
        LISTAGG(asa.as_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_bonus,
        LISTAGG(cg.cg_fair_evaluation, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg_fair_evaluation,
        LISTAGG(cg.cg, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg,
        LISTAGG(cg.cg_capable_colleague, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg_capable_colleague,
        LISTAGG(oc.oc_team, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_team,
        LISTAGG(oc.oc_clothes, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_clothes,
        LISTAGG(oc.oc_meeting, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_meeting,
        LISTAGG(oc.oc_work, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_work,
        LISTAGG(oc.oc_system, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_system,
        LISTAGG(oc.oc_culture, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_culture,
        LISTAGG(w.w_study, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_study,
        LISTAGG(w.w_spply, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_spply,
        LISTAGG(w.w_holiday_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_holiday_bonus,
        LISTAGG(w.w_vacation_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_vacation_bonus,
        LISTAGG(w.w_stock_option, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_stock_option,
        LISTAGG(wlb.wlb_provide, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_provide,
        LISTAGG(wlb.wlb_gohome, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_gohome,
        LISTAGG(wlb.wlb_break, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_break,
        LISTAGG(js.js_grow_co, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_grow_co,
        LISTAGG(js.js_mgmt_vision, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_mgmt_vision,
        LISTAGG(js.js_best, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_best,
        ROW_NUMBER() OVER (ORDER BY cm.cm_co_name) AS rnum
    FROM
        review r
    JOIN
        company_member cm ON r.cm_id = cm.cm_id
    LEFT JOIN
        career_growth_evaluation cge ON r.rv_id = cge.rv_id
    LEFT JOIN
        career_growth cg ON cge.cg_id = cg.cg_id
    LEFT JOIN
        organizational_cltr_evltn oce ON r.rv_id = oce.rv_id
    LEFT JOIN
        organizational_culture oc ON oce.oc_id = oc.oc_id
    LEFT JOIN
        welfare_eval we ON r.rv_id = we.rv_id
    LEFT JOIN
        welfare w ON we.w_id = w.w_id
    LEFT JOIN
        work_life_balance_evaluation wlbe ON r.rv_id = wlbe.rv_id
    LEFT JOIN
        work_life_balance wlb ON wlbe.wlb_id = wlb.wlb_id
    LEFT JOIN
        annual_salary_evaluation ase ON r.rv_id = ase.rv_id
    LEFT JOIN
        annual_salary asa ON ase.as_id = asa.as_id
    LEFT JOIN
        job_stability_eval jse ON r.rv_id = jse.rv_id
    LEFT JOIN
        job_stability js ON jse.js_id = js.js_id
    INNER JOIN
        recruitment rec ON cm.cm_id = rec.cm_id
    GROUP BY
        cm.cm_co_name,
        cm.cm_co_logo,
        cm.cm_industry,
        cm.cm_id
  <if test=" annual_salary != null || work_life_balance != null || organizational_culture != null || welfareList || job_stability || career_growth != null">
    <trim prefix="having" suffixOverrides="and"> 
 		<if test="annual_salary != null">
        <trim suffix="and">
            <foreach collection="annual_salary" item="salary" separator="AND">
               MAX(CASE WHEN ${salary} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="work_life_balance != null">
        <trim suffix="and">
            <foreach collection="work_life_balance" item="balance" separator="AND">
                MAX(CASE WHEN ${balance} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="organizational_culture != null">
        <trim suffix="and">
            <foreach collection="organizational_culture" item="culture" separator="AND">
                MAX(CASE WHEN ${culture} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="welfareList != null">
        <trim suffix="and">
            <foreach collection="welfareList" item="welfare" separator="AND">
                MAX(CASE WHEN ${welfare} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="job_stability != null">
        <trim suffix="and">
            <foreach collection="job_stability" item="stability" separator="AND">
                MAX(CASE WHEN ${stability} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="career_growth != null">
        <trim suffix="and">
            <foreach collection="career_growth" item="career" separator="AND">
                MAX(CASE WHEN ${career} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        </trim>   
  </if>      
)
SELECT
    count(*)
FROM
    RankedData
	<if test="keyword != null">
	where cm_co_name LIKE '%' || #{keyword} || '%'
	</if>
</select>

<select id="selectSearchReview" resultType="cod" parameterType="java.util.HashMap">
     WITH RankedData AS (
    SELECT
        cm.cm_co_name,
        cm.cm_co_logo,
        cm.cm_industry,
        cm.cm_id,
        LISTAGG(asa.as_sal, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_sal,
        LISTAGG(asa.as_first_sal, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_first_sal,
        LISTAGG(asa.as_retirement_pay, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_retirement_pay,
        LISTAGG(asa.as_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS as_bonus,
        LISTAGG(cg.cg_fair_evaluation, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg_fair_evaluation,
        LISTAGG(cg.cg, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg,
        LISTAGG(cg.cg_capable_colleague, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS cg_capable_colleague,
        LISTAGG(oc.oc_team, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_team,
        LISTAGG(oc.oc_clothes, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_clothes,
        LISTAGG(oc.oc_meeting, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_meeting,
        LISTAGG(oc.oc_work, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_work,
        LISTAGG(oc.oc_system, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_system,
        LISTAGG(oc.oc_culture, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS oc_culture,
        LISTAGG(w.w_study, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_study,
        LISTAGG(w.w_spply, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_spply,
        LISTAGG(w.w_holiday_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_holiday_bonus,
        LISTAGG(w.w_vacation_bonus, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_vacation_bonus,
        LISTAGG(w.w_stock_option, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS w_stock_option,
        LISTAGG(wlb.wlb_provide, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_provide,
        LISTAGG(wlb.wlb_gohome, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_gohome,
        LISTAGG(wlb.wlb_break, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS wlb_break,
        LISTAGG(js.js_grow_co, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_grow_co,
        LISTAGG(js.js_mgmt_vision, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_mgmt_vision,
        LISTAGG(js.js_best, ', ') WITHIN GROUP (ORDER BY r.rv_id) AS js_best
    FROM
        review r
    JOIN
        company_member cm ON r.cm_id = cm.cm_id
    LEFT JOIN
        career_growth_evaluation cge ON r.rv_id = cge.rv_id
    LEFT JOIN
        career_growth cg ON cge.cg_id = cg.cg_id
    LEFT JOIN
        organizational_cltr_evltn oce ON r.rv_id = oce.rv_id
    LEFT JOIN
        organizational_culture oc ON oce.oc_id = oc.oc_id
    LEFT JOIN
        welfare_eval we ON r.rv_id = we.rv_id
    LEFT JOIN
        welfare w ON we.w_id = w.w_id
    LEFT JOIN
        work_life_balance_evaluation wlbe ON r.rv_id = wlbe.rv_id
    LEFT JOIN
        work_life_balance wlb ON wlbe.wlb_id = wlb.wlb_id
    LEFT JOIN
        annual_salary_evaluation ase ON r.rv_id = ase.rv_id
    LEFT JOIN
        annual_salary asa ON ase.as_id = asa.as_id
    LEFT JOIN
        job_stability_eval jse ON r.rv_id = jse.rv_id
    LEFT JOIN
        job_stability js ON jse.js_id = js.js_id
    INNER JOIN
        recruitment rec ON cm.cm_id = rec.cm_id
    GROUP BY
        cm.cm_co_name,
        cm.cm_co_logo,
        cm.cm_industry,
        cm.cm_id
    <if test=" annual_salary != null || work_life_balance != null || organizational_culture != null || welfareList || job_stability || career_growth != null">
    <trim prefix="having" suffixOverrides="and"> 
 		<if test="annual_salary != null">
        <trim suffix="and">
            <foreach collection="annual_salary" item="salary" separator="AND">
               MAX(CASE WHEN ${salary} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="work_life_balance != null">
        <trim suffix="and">
            <foreach collection="work_life_balance" item="balance" separator="AND">
                MAX(CASE WHEN ${balance} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="organizational_culture != null">
        <trim suffix="and">
            <foreach collection="organizational_culture" item="culture" separator="AND">
                MAX(CASE WHEN ${culture} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="welfareList != null">
        <trim suffix="and">
            <foreach collection="welfareList" item="welfare" separator="AND">
                MAX(CASE WHEN ${welfare} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="job_stability != null">
        <trim suffix="and">
            <foreach collection="job_stability" item="stability" separator="AND">
                MAX(CASE WHEN ${stability} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        <if test="career_growth != null">
        <trim suffix="and">
            <foreach collection="career_growth" item="career" separator="AND">
                MAX(CASE WHEN ${career} = 'Y' THEN 1 ELSE 0 END) = 1
            </foreach>
        </trim>
        </if>
        </trim>   
  </if>           
)
SELECT
  cm_co_name, cm_co_logo, cm_industry, cm_id, rnum
FROM (
  SELECT
    cm_co_name, cm_co_logo, cm_industry, cm_id,
    ROW_NUMBER() OVER (ORDER BY cm_co_name) AS rnum
  FROM
    RankedData
    <if test="keyword != null">
        where cm_co_name LIKE '%' || #{keyword} || '%'
    </if>
  	) Subquery
WHERE
  rnum BETWEEN #{ startNum } AND #{ endNum }
</select>

<select id="selectSalaryNum" resultType="kr.co.sist.user.review.domain.SalaryDomain" parameterType="String">
SELECT
        cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT ae.as_id) AS total_evaluations,
  	SUM(CASE WHEN asal.as_sal = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 4) sal_num,
    SUM(CASE WHEN asal.as_first_sal = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 4) firstsal_num,
    SUM(CASE WHEN asal.as_retirement_pay = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 4) retirementpay_num,
    SUM(CASE WHEN asal.as_bonus = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 4) bonus_num,
    TRUNC(
		(SUM(CASE WHEN asal.as_sal = 'Y' THEN 1 ELSE 0 END) +
     SUM(CASE WHEN asal.as_first_sal = 'Y' THEN 1 ELSE 0 END) +
     SUM(CASE WHEN asal.as_retirement_pay = 'Y' THEN 1 ELSE 0 END) +
     SUM(CASE WHEN asal.as_bonus = 'Y' THEN 1 ELSE 0 END))*100 /
    (COUNT(r.rv_id) * 4)
		)AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    annual_salary_evaluation ae ON r.rv_id = ae.rv_id
LEFT JOIN
    annual_salary asal ON ae.as_id = asal.as_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name
</select>

<select id="selectBalanceNum" resultType="kr.co.sist.user.review.domain.BalanceDomain" parameterType="String">
SELECT
    cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT we.wlb_id) AS total_evaluation,
    SUM(CASE WHEN w.wlb_provide = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 3) AS provide_count,
    SUM(CASE WHEN w.wlb_gohome = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 3) AS gohome_count,
    SUM(CASE WHEN w.wlb_break = 'Y' THEN 1 ELSE 0 END)*100 /
    (COUNT(r.rv_id) * 3) AS break_count,
     TRUNC(
		(SUM(CASE WHEN w.wlb_provide = 'Y' THEN 1 ELSE 0 END) +
     SUM(CASE WHEN w.wlb_gohome = 'Y' THEN 1 ELSE 0 END) +
     SUM(CASE WHEN w.wlb_break = 'Y' THEN 1 ELSE 0 END))*100 /
    (COUNT(r.rv_id) * 3) 
		) AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    work_life_balance_evaluation we ON r.rv_id = we.rv_id
LEFT JOIN
    work_life_balance w ON we.wlb_id = w.wlb_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name
</select>

<select id="selectCultureNum" resultType="kr.co.sist.user.review.domain.CultureDomain" parameterType="String">
SELECT
    cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT oce.oc_id) AS total_oc_evaluation,
    SUM(CASE WHEN oc.oc_team = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS team_count,
    SUM(CASE WHEN oc.oc_clothes = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS clothes_count,
    SUM(CASE WHEN oc.oc_meeting = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS meeting_count,
    SUM(CASE WHEN oc.oc_work = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS work_count,
    SUM(CASE WHEN oc.oc_system = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS system_count,
    SUM(CASE WHEN oc.oc_culture = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 6) AS culture_count,
     TRUNC(
        (SUM(CASE WHEN oc.oc_team = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN oc.oc_clothes = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN oc.oc_meeting = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN oc.oc_work = 'Y' THEN 1 ELSE 0 END)+
         SUM(CASE WHEN oc.oc_system = 'Y' THEN 1 ELSE 0 END)+
         SUM(CASE WHEN oc.oc_culture = 'Y' THEN 1 ELSE 0 END)) * 100 /
        (COUNT(r.rv_id) * 6)
    ) AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    organizational_cltr_evltn oce ON r.rv_id = oce.rv_id
LEFT JOIN
    organizational_culture oc ON oce.oc_id = oc.oc_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name

</select>

<select id="selectStabilityNum" resultType="kr.co.sist.user.review.domain.StabilityDomain" parameterType="String">
SELECT
    cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT jse.js_id) AS total_evaluation,
    SUM(CASE WHEN js.js_grow_co = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS grow_co_count,
    SUM(CASE WHEN js.js_mgmt_vision = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS mgmt_vision_count,
    SUM(CASE WHEN js.js_best = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS best_count,
    TRUNC(
        (SUM(CASE WHEN js.js_grow_co = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN js.js_mgmt_vision = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN js.js_best = 'Y' THEN 1 ELSE 0 END)) * 100 /
        (COUNT(r.rv_id) * 3)
    ) AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    job_stability_eval jse ON r.rv_id = jse.rv_id
LEFT JOIN
    job_stability js ON jse.js_id = js.js_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name

</select>

<select id="selectWelfareNum" resultType="kr.co.sist.user.review.domain.WelfareDomain" parameterType="String">
SELECT
    cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT we.w_id) AS total_evaluation,
    SUM(CASE WHEN w.w_study = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 5) AS study_count,
    SUM(CASE WHEN w.w_spply = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 5) AS spply_count,
    SUM(CASE WHEN w.w_holiday_bonus = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 5) AS holiday_bonus_count,
    SUM(CASE WHEN w.w_vacation_bonus = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 5) AS vacation_bonus_count,
    SUM(CASE WHEN w.w_stock_option = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 5) AS stock_option_count,
    TRUNC(
        (SUM(CASE WHEN w.w_study = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN w.w_spply = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN w.w_holiday_bonus = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN w.w_vacation_bonus = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN w.w_stock_option = 'Y' THEN 1 ELSE 0 END)) * 100 /
        (COUNT(r.rv_id) * 5)
    ) AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    welfare_eval we ON r.rv_id = we.rv_id
LEFT JOIN
    welfare w ON we.w_id = w.w_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name
</select>

<select id="selectReviewCareerNum" resultType="kr.co.sist.user.review.domain.ReviewCareerDomain" parameterType="String">
SELECT
    cm.cm_co_name,
    COUNT(DISTINCT r.rv_id) AS total_review,
    COUNT(DISTINCT cge.cg_id) AS total_evaluation,
    SUM(CASE WHEN cg.cg_fair_evaluation = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS fair_evaluation_count,
    SUM(CASE WHEN cg.cg = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS career_growth_count,
    SUM(CASE WHEN cg.cg_capable_colleague = 'Y' THEN 1 ELSE 0 END) * 100 /
        (COUNT(r.rv_id) * 3) AS capable_colleague_count,
     TRUNC(
        (SUM(CASE WHEN cg.cg_fair_evaluation = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN cg.cg = 'Y' THEN 1 ELSE 0 END) +
         SUM(CASE WHEN cg.cg_capable_colleague = 'Y' THEN 1 ELSE 0 END)) * 100 /
        (COUNT(r.rv_id) * 3)
    ) AS total_sum
FROM
    company_member cm
LEFT JOIN
    review r ON cm.cm_id = r.cm_id
LEFT JOIN
    career_growth_evaluation cge ON r.rv_id = cge.rv_id
LEFT JOIN
    career_growth cg ON cge.cg_id = cg.cg_id
WHERE
    cm.cm_id = #{ cm_id }
GROUP BY
    cm.cm_co_name
</select>

<select id="selectCorperation" resultType="kr.co.sist.user.review.domain.CorperationDomain" parameterType="String">
SELECT
    cm_co_name,
    cm_industry,
    cm_co_logo
FROM company_member
WHERE
    cm_id = #{ cm_id }  
</select>

<select id="selectRecruitment" resultType="kr.co.sist.user.review.domain.CorperationDomain" parameterType="String">
SELECT
    COUNT(r.r_id) AS recruitmentcount,
    r.r_id,
    r.r_title,
    r.r_end_date
FROM
    company_member cm
LEFT JOIN
    recruitment r ON cm.cm_id = r.cm_id AND r.r_registration_state = 'Y'
WHERE
    cm.cm_id = #{cm_id}
GROUP BY
	r.r_id, r.r_title,r.r_end_date
</select>

<select id="selectFormerCompany" resultType="kr.co.sist.user.review.domain.CorperationDomain" parameterType="String">
SELECT DISTINCT
        cm.cm_id,
        cm.cm_co_name
    FROM
        application a
    JOIN
        recruitment r ON a.r_id = r.r_id
    JOIN
        company_member cm ON r.cm_id = cm.cm_id
    WHERE
        a.m_id = #{ m_id }
        AND a.a_recruitment_condition = 'Y'
        AND NOT EXISTS (
            SELECT 1
            FROM
                review rv
            WHERE
                rv.m_id = #{ m_id }
                AND rv.cm_id = cm.cm_id
        )
</select>

<select id="selectMyReviewList" resultType="kr.co.sist.user.review.domain.CorperationDomain" parameterType="String">
SELECT
    r.rv_id,
    r.m_id,
    r.cm_id,
    r.rv_reply_date,
    cm.cm_co_name,
    ase.as_id,
    wlb.wlb_id,
    w.w_id,
    cg.cg_id,
    oc.oc_id,
    js.js_id
FROM
    review r
JOIN
    company_member cm ON r.cm_id = cm.cm_id
LEFT JOIN annual_salary_evaluation ase ON r.rv_id = ase.rv_id
LEFT JOIN work_life_balance_evaluation wlb ON r.rv_id = wlb.rv_id
LEFT JOIN welfare_eval w ON r.rv_id = w.rv_id
LEFT JOIN career_growth_evaluation cg ON r.rv_id = cg.rv_id
LEFT JOIN organizational_cltr_evltn oc ON r.rv_id = oc.rv_id
LEFT JOIN job_stability_eval js ON r.rv_id = js.rv_id
WHERE
    r.m_id = #{m_id}
</select>



<insert id="insertReview" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="rv_id" keyProperty="rv_id">
	insert into review (rv_id, m_id, cm_id, rv_reply_date)
	values ('rv_' || lpad(rv_seq.nextval, 5, '0'), #{m_id},
			#{cm_id}, sysdate) 
</insert>

<insert id="insertSalary" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="as_id" keyProperty="as_id">
    insert into annual_salary (as_id, as_sal,as_first_sal, as_retirement_pay, as_bonus) values
    (
        'as_' || LPAD(as_seq.NEXTVAL, 5, '0'),
        <foreach collection="salary" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertBalance" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="wlb_id" keyProperty="wlb_id">
    insert into work_life_balance (wlb_id, wlb_provide,wlb_gohome, wlb_break) values
    (
        'wlb_' || LPAD(wlb_seq.NEXTVAL, 5, '0'),
        <foreach collection="balance" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertCulture" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="oc_id" keyProperty="oc_id">
    insert into organizational_culture (oc_id, oc_team, oc_clothes, oc_meeting, oc_work, oc_system, oc_culture) values
    (
        'oc_' || LPAD(oc_seq.NEXTVAL, 5, '0'),
       <foreach collection="culture" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertWelfare" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="w_id" keyProperty="w_id">
    insert into welfare (w_id, w_study, w_spply, w_holiday_bonus, w_vacation_bonus, w_stock_option) values
    (
        'w_' || LPAD(w_seq.NEXTVAL, 5, '0'),
       <foreach collection="welfare" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertStability" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="js_id" keyProperty="js_id">
    insert into job_stability (js_id, js_grow_co, js_mgmt_vision, js_best) values
    (
        'js_' || LPAD(js_seq.NEXTVAL, 5, '0'),
       <foreach collection="stability" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertCareer" parameterType="kr.co.sist.user.review.vo.ReviewPageVO" useGeneratedKeys="true" keyColumn="cg_id" keyProperty="cg_id">
    insert into career_growth (cg_id,cg_fair_evaluation, cg, cg_capable_colleague) values
    (
        'cg_' || LPAD(cg_seq.NEXTVAL, 5, '0'),
        <foreach collection="career" item="item" separator=",">
            <choose>
                <when test='item == "Y"'>#{item}</when>
                <otherwise>'N'</otherwise>
            </choose>
        </foreach>
    )
</insert>

<insert id="insertSalaryEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into annual_salary_evaluation (as_id, rv_id)
	values (#{as_id}, #{rv_id})
</insert>

<insert id="insertBalanceEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into work_life_balance_evaluation (wlb_id, rv_id)
	values (#{wlb_id}, #{rv_id})
</insert>

<insert id="insertCultureEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into organizational_cltr_evltn (oc_id, rv_id)
	values (#{oc_id}, #{rv_id})
</insert>

<insert id="insertWelfareEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into welfare_eval (w_id, rv_id)
	values (#{w_id}, #{rv_id})
</insert>

<insert id="insertStabilityEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into job_stability_eval (js_id, rv_id)
	values (#{js_id}, #{rv_id})
</insert>

<insert id="insertCareerEval" parameterType="kr.co.sist.user.review.vo.ReviewPageVO">
	insert into career_growth_evaluation (cg_id, rv_id)
	values (#{cg_id}, #{rv_id})
</insert>

<update id="updateSalary" parameterType="kr.co.sist.user.review.vo.SalaryVO">
    UPDATE annual_salary
    SET
        as_sal = #{ as_sal },
        as_first_sal = #{ as_first_sal },
        as_retirement_pay = #{ as_retirement_pay },
        as_bonus = #{ as_bonus }
    WHERE as_id = #{as_id}
</update>

<update id="updateBalance" parameterType="kr.co.sist.user.review.vo.BalanceVO">
    UPDATE work_life_balance 
    SET
        wlb_provide  = #{ wlb_provide },
        wlb_gohome  = #{ wlb_gohome }, 
        wlb_break  = #{ wlb_break }

    WHERE wlb_id  = #{wlb_id}
</update>

<update id="updateCulture" parameterType="kr.co.sist.user.review.vo.CultureVO">
    UPDATE organizational_culture 
    SET
        oc_team = #{ oc_team },
        oc_clothes = #{ oc_clothes },
        oc_meeting = #{ oc_meeting },
        oc_work = #{ oc_work },
        oc_system = #{ oc_system },
        oc_culture = #{ oc_culture } 

    WHERE oc_id  = #{oc_id}
</update>

<update id="updateWelfare" parameterType="kr.co.sist.user.review.vo.WelfareVO">
    UPDATE welfare
    SET
        w_study = #{ w_study },
        w_spply = #{ w_spply },
        w_holiday_bonus = #{ w_holiday_bonus },
        w_vacation_bonus = #{ w_vacation_bonus },
        w_stock_option = #{ w_stock_option } 
    WHERE w_id = #{w_id}
</update>

<update id="updateStability" parameterType="kr.co.sist.user.review.vo.StabilityVO">
    UPDATE job_stability
    SET
        js_grow_co = #{js_grow_co},
        js_mgmt_vision = #{js_mgmt_vision},
        js_best = #{js_best}
    WHERE js_id = #{js_id}
</update>

<update id="updateReviewCareer" parameterType="kr.co.sist.user.review.vo.ReviewCareerVO">
    UPDATE career_growth
    SET
        cg_fair_evaluation = #{ cg_fair_evaluation },
        cg = #{ cg },
        cg_capable_colleague = #{ cg_capable_colleague }
    WHERE cg_id = #{cg_id}
</update>

<select id="selectCheckSalary" resultType="kr.co.sist.user.review.domain.SalaryDomain" parameterType="String">
	SELECT
	asa.as_id, 
    asa.as_sal,
    asa.as_first_sal,
    asa.as_retirement_pay,
    asa.as_bonus
FROM 
    review r
JOIN 
    annual_salary_evaluation ase ON r.rv_id = ase.rv_id
JOIN 
    annual_salary asa ON ase.as_id = asa.as_id
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectCheckBalance" resultType="kr.co.sist.user.review.domain.BalanceDomain" parameterType="String">
	SELECT
	wlb.wlb_id, 
    wlb.wlb_provide,
    wlb.wlb_gohome,
    wlb.wlb_break 
FROM 
    review r
JOIN 
    work_life_balance_evaluation wlbe ON r.rv_id = wlbe.rv_id
JOIN 
    work_life_balance wlb ON wlbe.wlb_id = wlb.wlb_id
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectCheckCulture" resultType="kr.co.sist.user.review.domain.CultureDomain" parameterType="String">
	SELECT
	oc.oc_id, 
    oc.oc_team,
    oc.oc_clothes,
    oc.oc_meeting,
    oc.oc_work, 
    oc.oc_system,
    oc.oc_culture
FROM 
    review r
JOIN 
    organizational_cltr_evltn oce ON r.rv_id = oce.rv_id
JOIN 
    organizational_culture oc ON oce.oc_id = oc.oc_id
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectCheckWelfare" resultType="kr.co.sist.user.review.domain.WelfareDomain" parameterType="String">
	SELECT
	w.w_id, 
    w.w_study ,
    w.w_spply ,
    w.w_holiday_bonus ,
    w.w_vacation_bonus ,
    w.w_stock_option 
FROM 
    review r
JOIN 
    welfare_eval we ON r.rv_id = we.rv_id
JOIN 
    welfare w ON we.w_id = w.w_id 
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectCheckStability" resultType="kr.co.sist.user.review.domain.StabilityDomain" parameterType="String">
	SELECT
	js.js_id, 
    js.js_grow_co,
    js.js_mgmt_vision,
    js.js_best
FROM 
    review r
JOIN 
    job_stability_eval jse ON r.rv_id = jse.rv_id
JOIN 
    job_stability js ON jse.js_id = js.js_id
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectCheckCareer" resultType="kr.co.sist.user.review.domain.ReviewCareerDomain" parameterType="String">
	SELECT
	cg.cg_id, 
    cg.cg_fair_evaluation ,
    cg.cg ,
    cg.cg_capable_colleague 
FROM 
    review r
JOIN 
    career_growth_evaluation cge ON r.rv_id = cge.rv_id
JOIN 
    career_growth cg ON cge.cg_id = cg.cg_id
WHERE 
    r.rv_id = #{ rv_id }
</select>

<select id="selectLikeCompany" resultType="kr.co.sist.user.review.domain.LikeDomain" parameterType="kr.co.sist.user.review.vo.LikeVO">
select ic_id, m_id, cm_id, ic_check_condition
from interesting_company
where m_id= #{ m_id } and cm_id= #{ cm_id }
</select>

<insert id="insertLikeCompany" parameterType="kr.co.sist.user.review.vo.LikeVO">
INSERT INTO interesting_company (ic_id, m_id, cm_id, ic_check_condition)
VALUES (
		'ic_' || LPAD(ic_seq.NEXTVAL, 5, '0'),
 		#{ m_id },
 		#{ cm_id },
 		'Y')
</insert>

<delete id="deleteLikeCompany" parameterType="kr.co.sist.user.review.vo.LikeVO">
delete from interesting_company 
where ic_id = #{ ic_id }
</delete>

<select id="selectLikeRank" resultType="kr.co.sist.user.review.domain.LikeDomain">
SELECT
    cm_id,
    cm_co_name,
    check_count,
    ROW_NUMBER() OVER (ORDER BY check_count DESC) AS ranking
FROM (
    SELECT
        cm.cm_id,
        cm.cm_co_name,
        COUNT(ic.ic_id) AS check_count
    FROM
        company_member cm
    LEFT JOIN
        interesting_company ic ON cm.cm_id = ic.cm_id AND ic.ic_check_condition = 'Y'
    GROUP BY
        cm.cm_id, cm.cm_co_name
)
WHERE
    ROWNUM between 1 and 10
</select>

</mapper>